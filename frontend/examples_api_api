"""
Exemples d'appels √† l'API d'analyse vid√©o
------------------------------------------

Ce script d√©montre comment appeler les nouveaux endpoints d'analyse vid√©o
ajout√©s √† l'API d'inf√©rence multi-session.
"""

import requests
import json
import time
import os
from pprint import pprint

# Configuration
API_URL = "http://localhost:8000"  # URL de l'API
API_KEY = "votre_cl√©_api"  # Remplacer par une cl√© API valide

# Chemins des fichiers vid√©o √† analyser
VIDEO_FILE_MANIPULATION = "path/to/your/video_manipulation_sample.mp4"
VIDEO_FILE_NONVERBAL = "path/to/your/nonverbal_sample.mp4"

def check_api_health():
    """V√©rifie si l'API est en fonctionnement"""
    response = requests.get(f"{API_URL}/api/health")
    if response.status_code == 200:
        print("‚úÖ L'API est op√©rationnelle")
        return True
    else:
        print("‚ùå L'API n'est pas accessible")
        return False

def analyze_video_manipulation(video_path):
    """Soumet une vid√©o pour analyse des strat√©gies de manipulation"""
    headers = {
        "X-API-Key": API_KEY
    }
    
    with open(video_path, "rb") as video_file:
        files = {
            "file": (os.path.basename(video_path), video_file, "video/mp4")
        }
        data = {
            "keep_video": "false"
        }
        
        print("üì§ Envoi de la vid√©o pour analyse des strat√©gies de manipulation...")
        response = requests.post(
            f"{API_URL}/api/video/manipulation-analysis",
            headers=headers,
            files=files,
            data=data
        )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return None
    
    result = response.json()
    print(f"‚úÖ T√¢che cr√©√©e avec ID: {result['task_id']}")
    
    return result["task_id"]

def analyze_nonverbal_behavior(video_path):
    """Soumet une vid√©o pour analyse des comportements non-verbaux"""
    headers = {
        "X-API-Key": API_KEY
    }
    
    with open(video_path, "rb") as video_file:
        files = {
            "file": (os.path.basename(video_path), video_file, "video/mp4")
        }
        data = {
            "keep_video": "false"
        }
        
        print("üì§ Envoi de la vid√©o pour analyse des comportements non-verbaux...")
        response = requests.post(
            f"{API_URL}/api/video/nonverbal-analysis",
            headers=headers,
            files=files,
            data=data
        )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return None
    
    result = response.json()
    print(f"‚úÖ T√¢che cr√©√©e avec ID: {result['task_id']}")
    
    return result["task_id"]

def check_task_status(task_id):
    """V√©rifie l'√©tat d'une t√¢che d'analyse vid√©o"""
    headers = {
        "X-API-Key": API_KEY
    }
    
    response = requests.get(
        f"{API_URL}/api/video/tasks/{task_id}",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return None
    
    return response.json()

def wait_for_completion(task_id, max_wait_time=600):
    """Attend la fin d'une t√¢che d'analyse vid√©o"""
    print(f"‚è≥ Attente de la fin de la t√¢che {task_id}...")
    
    start_time = time.time()
    
    while time.time() - start_time < max_wait_time:
        task_info = check_task_status(task_id)
        
        if not task_info:
            print("‚ùå Impossible de r√©cup√©rer l'√©tat de la t√¢che")
            return None
        
        status = task_info["status"]
        progress = task_info.get("progress", 0)
        message = task_info.get("message", "")
        
        print(f"üìä Statut: {status} - Progression: {progress:.1f}% - Message: {message}")
        
        if status == "completed":
            print("‚úÖ Traitement termin√©!")
            return task_info
        
        if status == "failed":
            print(f"‚ùå √âchec du traitement: {task_info.get('error', 'Erreur inconnue')}")
            return task_info
        
        # Attendre avant de v√©rifier √† nouveau
        time.sleep(10)
    
    print(f"‚ö†Ô∏è D√©lai d'attente d√©pass√© ({max_wait_time} secondes)")
    return None

def list_video_tasks():
    """Liste les t√¢ches d'analyse vid√©o"""
    headers = {
        "X-API-Key": API_KEY
    }
    
    response = requests.get(
        f"{API_URL}/api/video/tasks",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return None
    
    tasks = response.json()
    print(f"üìã Nombre total de t√¢ches: {tasks['total']}")
    
    for task_id, task_info in tasks.get("tasks", {}).items():
        print(f"- {task_id}: {task_info['status']} ({task_info.get('type', 'unknown')})")
    
    return tasks

def delete_task(task_id):
    """Supprime une t√¢che d'analyse vid√©o"""
    headers = {
        "X-API-Key": API_KEY
    }
    
    response = requests.delete(
        f"{API_URL}/api/video/tasks/{task_id}",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return False
    
    print(f"üóëÔ∏è T√¢che {task_id} supprim√©e avec succ√®s")
    return True

def save_results(task_info, output_file):
    """Sauvegarde les r√©sultats d'une t√¢che d'analyse vid√©o"""
    if "results" not in task_info:
        print("‚ùå Aucun r√©sultat disponible")
        return False
    
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(task_info["results"], f, ensure_ascii=False, indent=2)
    
    print(f"üíæ R√©sultats sauvegard√©s dans {output_file}")
    return True

def main():
    """Fonction principale pour d√©montrer l'utilisation de l'API d'analyse vid√©o"""
    # V√©rifier l'√©tat de l'API
    if not check_api_health():
        return
    
    # Exemple 1: Analyse des strat√©gies de manipulation
    if os.path.exists(VIDEO_FILE_MANIPULATION):
        print("\nüìπ Exemple 1: Analyse des strat√©gies de manipulation vid√©o")
        task_id = analyze_video_manipulation(VIDEO_FILE_MANIPULATION)
        
        if task_id:
            task_info = wait_for_completion(task_id)
            
            if task_info and task_info["status"] == "completed":
                save_results(task_info, "manipulation_analysis_results.json")
    else:
        print(f"‚ö†Ô∏è Fichier vid√©o non trouv√©: {VIDEO_FILE_MANIPULATION}")
    
    # Exemple 2: Analyse des comportements non-verbaux
    if os.path.exists(VIDEO_FILE_NONVERBAL):
        print("\nüìπ Exemple 2: Analyse des comportements non-verbaux")
        task_id = analyze_nonverbal_behavior(VIDEO_FILE_NONVERBAL)
        
        if task_id:
            task_info = wait_for_completion(task_id)
            
            if task_info and task_info["status"] == "completed":
                save_results(task_info, "nonverbal_analysis_results.json")
    else:
        print(f"‚ö†Ô∏è Fichier vid√©o non trouv√©: {VIDEO_FILE_NONVERBAL}")
    
    # Liste des t√¢ches
    print("\nüìã Liste des t√¢ches d'analyse vid√©o:")
    list_video_tasks()

if __name__ == "__main__":
    main()