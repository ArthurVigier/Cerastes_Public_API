"""
Tests for Stripe payment integration
----------------------------------
This module tests the Stripe payment integration including
checkout sessions, webhooks, and subscription management.
"""

import pytest
import requests
import json
import uuid
import time
import base64
import hmac
import hashlib
from unittest.mock import patch, MagicMock


class TestStripeIntegration:
    """Test class for Stripe payment integration."""
    
    # Test constants
    TEST_CUSTOMER_ID = 'cus_XXXXXXXXXXXX'
    TEST_SUBSCRIPTION_ID = 'sub_XXXXXXXXXXXX'
    TEST_PAYMENT_METHOD_ID = 'pm_XXXXXXXXXXXX'
    TEST_PRICE_ID = 'price_1XXXXXXXXXXXXXXXXXXXbasic'
    TEST_INVOICE_ID = 'in_XXXXXXXXXXXX'
    TEST_WEBHOOK_SECRET = 'whsec_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
    
    @pytest.fixture(scope="function")
    def stripe_customer(self, api_url, auth_headers):
        """Create or get a Stripe customer for the current user."""
        # Try to get current customer info from subscription endpoint
        response = requests.get(
            f"{api_url}/api/subscriptions/current",
            headers=auth_headers
        )
        
        # Skip if subscription endpoints not available
        if response.status_code == 404:
            pytest.skip("Subscription endpoints not available")
        
        # If Stripe integration is not configured, skip test
        if response.status_code == 500 and "stripe" in response.text.lower():
            pytest.skip("Stripe integration not configured")
        
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
        
        # Check if user has a Stripe customer ID
        data = response.json()
        if data.get("customer_id"):
            return data["customer_id"]
        
        # If no customer ID, try to create a customer
        response = requests.post(
            f"{api_url}/api/subscriptions/create-customer",
            headers=auth_headers
        )
        
        # Skip if endpoint doesn't exist
        if response.status_code == 404:
            pytest.skip("Create customer endpoint not available")
        
        assert response.status_code == 200, f"Failed to create customer: {response.status_code}, {response.text}"
        
        data = response.json()
        return data["customer_id"]
    
    def compute_webhook_signature(self, payload: str, timestamp: int, secret: str) -> str:
        """Compute a Stripe webhook signature for testing."""
        signed_payload = f"{timestamp}.{payload}"
        signature = hmac.new(
            secret.encode('utf-8'),
            signed_payload.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def test_create_checkout_session(self, api_url, auth_headers):
        """Test creating a Stripe checkout session."""
        # First get available plans
        plans_response = requests.get(f"{api_url}/api/subscriptions/plans")
        
        # Skip if plans endpoint not available
        if plans_response.status_code == 404:
            pytest.skip("Subscription plans endpoint not available")
        
        # Skip if no plans available
        plans_data = plans_response.json()
        if not plans_data.get("plans"):
            pytest.skip("No subscription plans available")
        
        # Use the first plan
        plan_id = plans_data["plans"][0]["id"]
        
        # Create checkout data
        checkout_data = {
            "plan": plan_id,
            "success_url": f"{api_url}/payment/success?session_id={{CHECKOUT_SESSION_ID}}",
            "cancel_url": f"{api_url}/payment/cancel"
        }
        
        # Create checkout session
        response = requests.post(
            f"{api_url}/api/subscriptions/checkout",
            json=checkout_data,
            headers=auth_headers
        )
        
        # Skip if endpoint not available
        if response.status_code == 404:
            pytest.skip("Checkout endpoint not available")
        
        # Skip if Stripe not configured
        if response.status_code == 500 and "stripe" in response.text.lower():
            pytest.skip("Stripe not configured")
        
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
        
        # Check response format
        data = response.json()
        assert "sessionId" in data or "session_id" in data, "No session ID in response"
        assert "url" in data, "No URL in response"
        
        # Store session ID for possible later use
        session_id = data.get("sessionId") or data.get("session_id")
        assert session_id, "Empty session ID"
    
    def test_webhook_handling(self, api_url):
        """Test Stripe webhook handling with simulated events."""
        # Skip if we don't know the webhook secret
        webhook_secret = os.environ.get("STRIPE_WEBHOOK_SECRET") or self.TEST_WEBHOOK_SECRET
        if not webhook_secret:
            pytest.skip("No webhook secret available for testing")
        
        # Create a mock payment_intent.succeeded event
        event_data = {
            "id": f"evt_{uuid.uuid4().hex}",
            "object": "event",
            "type": "payment_intent.succeeded",
            "data": {
                "object": {
                    "id": f"pi_{uuid.uuid4().hex}",
                    "object": "payment_intent",
                    "amount": 2000,
                    "currency": "usd",
                    "status": "succeeded",
                    "customer": self.TEST_CUSTOMER_ID
                }
            }
        }
        
        # Calculate signature
        timestamp = int(time.time())
        payload = json.dumps(event_data)
        signature = self.compute_webhook_signature(payload, timestamp, webhook_secret)
        
        # Send webhook request
        headers = {
            "Stripe-Signature": f"t={timestamp},v1={signature}"
        }
        
        response = requests.post(
            f"{api_url}/api/subscriptions/webhook",
            headers=headers,
            data=payload
        )
        
        # Skip if webhook endpoint not available
        if response.status_code == 404:
            pytest.skip("Webhook endpoint not available")
        
        # Note: Even if verification fails due to wrong secret, the endpoint should still return 200
        # as per Stripe's recommendations to prevent timing attacks
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
    
    def test_subscription_events(self, api_url):
        """Test handling of subscription events via webhooks."""
        # Skip if we don't know the webhook secret
        webhook_secret = os.environ.get("STRIPE_WEBHOOK_SECRET") or self.TEST_WEBHOOK_SECRET
        if not webhook_secret:
            pytest.skip("No webhook secret available for testing")
        
        # Create a mock customer.subscription.updated event
        event_data = {
            "id": f"evt_{uuid.uuid4().hex}",
            "object": "event",
            "type": "customer.subscription.updated",
            "data": {
                "object": {
                    "id": self.TEST_SUBSCRIPTION_ID,
                    "object": "subscription",
                    "customer": self.TEST_CUSTOMER_ID,
                    "status": "active",
                    "cancel_at_period_end": False,
                    "items": {
                        "data": [
                            {
                                "price": {
                                    "id": self.TEST_PRICE_ID,
                                    "product": "prod_XXXXXXXXXXXXXXXX"
                                }
                            }
                        ]
                    }
                }
            }
        }
        
        # Calculate signature
        timestamp = int(time.time())
        payload = json.dumps(event_data)
        signature = self.compute_webhook_signature(payload, timestamp, webhook_secret)
        
        # Send webhook request
        headers = {
            "Stripe-Signature": f"t={timestamp},v1={signature}"
        }
        
        response = requests.post(
            f"{api_url}/api/subscriptions/webhook",
            headers=headers,
            data=payload
        )
        
        # Skip if webhook endpoint not available
        if response.status_code == 404:
            pytest.skip("Webhook endpoint not available")
        
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
    
    def test_get_invoices(self, api_url, auth_headers):
        """Test retrieving user invoices."""
        response = requests.get(
            f"{api_url}/api/subscriptions/invoices",
            headers=auth_headers
        )
        
        # Skip if endpoint not available
        if response.status_code == 404:
            pytest.skip("Invoices endpoint not available")
        
        # Skip if Stripe not configured
        if response.status_code == 500 and "stripe" in response.text.lower():
            pytest.skip("Stripe not configured")
        
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
        
        # Check response format
        data = response.json()
        assert "invoices" in data, "No invoices in response"
        assert isinstance(data["invoices"], list), "Invoices should be a list"
    
    def test_get_payment_methods(self, api_url, auth_headers):
        """Test retrieving user payment methods."""
        response = requests.get(
            f"{api_url}/api/subscriptions/payment-methods",
            headers=auth_headers
        )
        
        # Skip if endpoint not available
        if response.status_code == 404:
            pytest.skip("Payment methods endpoint not available")
        
        # Skip if Stripe not configured
        if response.status_code == 500 and "stripe" in response.text.lower():
            pytest.skip("Stripe not configured")
        
        assert response.status_code == 200, f"Unexpected status code: {response.status_code}, {response.text}"
        
        # Check response format
        data = response.json()
        assert "payment_methods" in data, "No payment methods in response"
        assert isinstance(data["payment_methods"], list), "Payment methods should be a list"